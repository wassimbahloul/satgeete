{
  "version": 3,
  "sources": ["../../../../../node_modules/rxfire/auth/index.esm.js", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-auth.mjs", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-analytics.mjs", "../../../../../node_modules/@angular/fire/fesm2022/angular-fire-compat-analytics.mjs"],
  "sourcesContent": ["import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\nfunction authState(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction user(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nfunction idToken(auth) {\n    return user(auth).pipe(switchMap(function (user) { return (user ? from(getIdToken(user)) : of(null)); }));\n}\n\nexport { authState, idToken, user };\n\n", "import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵAppCheckInstances as _AppCheckInstances, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { authState as authState$1, user as user$1, idToken as idToken$1 } from 'rxfire/auth';\nimport { applyActionCode as applyActionCode$1, beforeAuthStateChanged as beforeAuthStateChanged$1, checkActionCode as checkActionCode$1, confirmPasswordReset as confirmPasswordReset$1, connectAuthEmulator as connectAuthEmulator$1, createUserWithEmailAndPassword as createUserWithEmailAndPassword$1, deleteUser as deleteUser$1, fetchSignInMethodsForEmail as fetchSignInMethodsForEmail$1, getAdditionalUserInfo as getAdditionalUserInfo$1, getAuth as getAuth$1, getIdToken as getIdToken$1, getIdTokenResult as getIdTokenResult$1, getMultiFactorResolver as getMultiFactorResolver$1, getRedirectResult as getRedirectResult$1, initializeAuth as initializeAuth$1, initializeRecaptchaConfig as initializeRecaptchaConfig$1, isSignInWithEmailLink as isSignInWithEmailLink$1, linkWithCredential as linkWithCredential$1, linkWithPhoneNumber as linkWithPhoneNumber$1, linkWithPopup as linkWithPopup$1, linkWithRedirect as linkWithRedirect$1, multiFactor as multiFactor$1, onAuthStateChanged as onAuthStateChanged$1, onIdTokenChanged as onIdTokenChanged$1, parseActionCodeURL as parseActionCodeURL$1, reauthenticateWithCredential as reauthenticateWithCredential$1, reauthenticateWithPhoneNumber as reauthenticateWithPhoneNumber$1, reauthenticateWithPopup as reauthenticateWithPopup$1, reauthenticateWithRedirect as reauthenticateWithRedirect$1, reload as reload$1, revokeAccessToken as revokeAccessToken$1, sendEmailVerification as sendEmailVerification$1, sendPasswordResetEmail as sendPasswordResetEmail$1, sendSignInLinkToEmail as sendSignInLinkToEmail$1, setPersistence as setPersistence$1, signInAnonymously as signInAnonymously$1, signInWithCredential as signInWithCredential$1, signInWithCustomToken as signInWithCustomToken$1, signInWithEmailAndPassword as signInWithEmailAndPassword$1, signInWithEmailLink as signInWithEmailLink$1, signInWithPhoneNumber as signInWithPhoneNumber$1, signInWithPopup as signInWithPopup$1, signInWithRedirect as signInWithRedirect$1, signOut as signOut$1, unlink as unlink$1, updateCurrentUser as updateCurrentUser$1, updateEmail as updateEmail$1, updatePassword as updatePassword$1, updatePhoneNumber as updatePhoneNumber$1, updateProfile as updateProfile$1, useDeviceLanguage as useDeviceLanguage$1, validatePassword as validatePassword$1, verifyBeforeUpdateEmail as verifyBeforeUpdateEmail$1, verifyPasswordResetCode as verifyPasswordResetCode$1 } from 'firebase/auth';\nexport * from 'firebase/auth';\nconst AUTH_PROVIDER_NAME = 'auth';\nclass Auth {\n  constructor(auth) {\n    return auth;\n  }\n}\nclass AuthInstances {\n  constructor() {\n    return _getAllInstancesOf(AUTH_PROVIDER_NAME);\n  }\n}\nconst authInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(AUTH_PROVIDER_NAME))), distinct());\nconst PROVIDED_AUTH_INSTANCES = new InjectionToken('angularfire2.auth-instances');\nfunction defaultAuthInstanceFactory(provided, defaultApp) {\n  const defaultAuth = _getDefaultInstanceOf(AUTH_PROVIDER_NAME, provided, defaultApp);\n  return defaultAuth && new Auth(defaultAuth);\n}\nfunction authInstanceFactory(fn) {\n  return (zone, injector) => {\n    const auth = zone.runOutsideAngular(() => fn(injector));\n    return new Auth(auth);\n  };\n}\nconst AUTH_INSTANCES_PROVIDER = {\n  provide: AuthInstances,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES]]\n};\nconst DEFAULT_AUTH_INSTANCE_PROVIDER = {\n  provide: Auth,\n  useFactory: defaultAuthInstanceFactory,\n  deps: [[new Optional(), PROVIDED_AUTH_INSTANCES], FirebaseApp]\n};\nclass AuthModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'auth');\n  }\n  static ɵfac = function AuthModule_Factory(t) {\n    return new (t || AuthModule)();\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AuthModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AuthModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER]\n    }]\n  }], () => [], null);\n})();\nfunction provideAuth(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'auth');\n  return makeEnvironmentProviders([DEFAULT_AUTH_INSTANCE_PROVIDER, AUTH_INSTANCES_PROVIDER, {\n    provide: PROVIDED_AUTH_INSTANCES,\n    useFactory: authInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps, [new Optional(), _AppCheckInstances], ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst authState = _zoneWrap(authState$1, true);\nconst user = _zoneWrap(user$1, true);\nconst idToken = _zoneWrap(idToken$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst applyActionCode = _zoneWrap(applyActionCode$1, true);\nconst beforeAuthStateChanged = _zoneWrap(beforeAuthStateChanged$1, true);\nconst checkActionCode = _zoneWrap(checkActionCode$1, true);\nconst confirmPasswordReset = _zoneWrap(confirmPasswordReset$1, true);\nconst connectAuthEmulator = _zoneWrap(connectAuthEmulator$1, true);\nconst createUserWithEmailAndPassword = _zoneWrap(createUserWithEmailAndPassword$1, true);\nconst deleteUser = _zoneWrap(deleteUser$1, true);\nconst fetchSignInMethodsForEmail = _zoneWrap(fetchSignInMethodsForEmail$1, true);\nconst getAdditionalUserInfo = _zoneWrap(getAdditionalUserInfo$1, true);\nconst getAuth = _zoneWrap(getAuth$1, true);\nconst getIdToken = _zoneWrap(getIdToken$1, true);\nconst getIdTokenResult = _zoneWrap(getIdTokenResult$1, true);\nconst getMultiFactorResolver = _zoneWrap(getMultiFactorResolver$1, true);\nconst getRedirectResult = _zoneWrap(getRedirectResult$1, true);\nconst initializeAuth = _zoneWrap(initializeAuth$1, true);\nconst initializeRecaptchaConfig = _zoneWrap(initializeRecaptchaConfig$1, true);\nconst isSignInWithEmailLink = _zoneWrap(isSignInWithEmailLink$1, true);\nconst linkWithCredential = _zoneWrap(linkWithCredential$1, true);\nconst linkWithPhoneNumber = _zoneWrap(linkWithPhoneNumber$1, true);\nconst linkWithPopup = _zoneWrap(linkWithPopup$1, true);\nconst linkWithRedirect = _zoneWrap(linkWithRedirect$1, true);\nconst multiFactor = _zoneWrap(multiFactor$1, true);\nconst onAuthStateChanged = _zoneWrap(onAuthStateChanged$1, true);\nconst onIdTokenChanged = _zoneWrap(onIdTokenChanged$1, true);\nconst parseActionCodeURL = _zoneWrap(parseActionCodeURL$1, true);\nconst reauthenticateWithCredential = _zoneWrap(reauthenticateWithCredential$1, true);\nconst reauthenticateWithPhoneNumber = _zoneWrap(reauthenticateWithPhoneNumber$1, true);\nconst reauthenticateWithPopup = _zoneWrap(reauthenticateWithPopup$1, true);\nconst reauthenticateWithRedirect = _zoneWrap(reauthenticateWithRedirect$1, true);\nconst reload = _zoneWrap(reload$1, true);\nconst revokeAccessToken = _zoneWrap(revokeAccessToken$1, true);\nconst sendEmailVerification = _zoneWrap(sendEmailVerification$1, true);\nconst sendPasswordResetEmail = _zoneWrap(sendPasswordResetEmail$1, true);\nconst sendSignInLinkToEmail = _zoneWrap(sendSignInLinkToEmail$1, true);\nconst setPersistence = _zoneWrap(setPersistence$1, true);\nconst signInAnonymously = _zoneWrap(signInAnonymously$1, true);\nconst signInWithCredential = _zoneWrap(signInWithCredential$1, true);\nconst signInWithCustomToken = _zoneWrap(signInWithCustomToken$1, true);\nconst signInWithEmailAndPassword = _zoneWrap(signInWithEmailAndPassword$1, true);\nconst signInWithEmailLink = _zoneWrap(signInWithEmailLink$1, true);\nconst signInWithPhoneNumber = _zoneWrap(signInWithPhoneNumber$1, true);\nconst signInWithPopup = _zoneWrap(signInWithPopup$1, true);\nconst signInWithRedirect = _zoneWrap(signInWithRedirect$1, true);\nconst signOut = _zoneWrap(signOut$1, true);\nconst unlink = _zoneWrap(unlink$1, true);\nconst updateCurrentUser = _zoneWrap(updateCurrentUser$1, true);\nconst updateEmail = _zoneWrap(updateEmail$1, true);\nconst updatePassword = _zoneWrap(updatePassword$1, true);\nconst updatePhoneNumber = _zoneWrap(updatePhoneNumber$1, true);\nconst updateProfile = _zoneWrap(updateProfile$1, true);\nconst useDeviceLanguage = _zoneWrap(useDeviceLanguage$1, true);\nconst validatePassword = _zoneWrap(validatePassword$1, true);\nconst verifyBeforeUpdateEmail = _zoneWrap(verifyBeforeUpdateEmail$1, true);\nconst verifyPasswordResetCode = _zoneWrap(verifyPasswordResetCode$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Auth, AuthInstances, AuthModule, applyActionCode, authInstance$, authState, beforeAuthStateChanged, checkActionCode, confirmPasswordReset, connectAuthEmulator, createUserWithEmailAndPassword, deleteUser, fetchSignInMethodsForEmail, getAdditionalUserInfo, getAuth, getIdToken, getIdTokenResult, getMultiFactorResolver, getRedirectResult, idToken, initializeAuth, initializeRecaptchaConfig, isSignInWithEmailLink, linkWithCredential, linkWithPhoneNumber, linkWithPopup, linkWithRedirect, multiFactor, onAuthStateChanged, onIdTokenChanged, parseActionCodeURL, provideAuth, reauthenticateWithCredential, reauthenticateWithPhoneNumber, reauthenticateWithPopup, reauthenticateWithRedirect, reload, revokeAccessToken, sendEmailVerification, sendPasswordResetEmail, sendSignInLinkToEmail, setPersistence, signInAnonymously, signInWithCredential, signInWithCustomToken, signInWithEmailAndPassword, signInWithEmailLink, signInWithPhoneNumber, signInWithPopup, signInWithRedirect, signOut, unlink, updateCurrentUser, updateEmail, updatePassword, updatePhoneNumber, updateProfile, useDeviceLanguage, user, validatePassword, verifyBeforeUpdateEmail, verifyPasswordResetCode };\n", "import { ɵgetAllInstancesOf as _getAllInstancesOf, ɵisSupportedError as _isSupportedError, ɵzoneWrap as _zoneWrap, VERSION, ɵgetDefaultInstanceOf as _getDefaultInstanceOf, ɵAngularFireSchedulers as _AngularFireSchedulers } from '@angular/fire';\nimport { timer, from, of } from 'rxjs';\nimport { concatMap, distinct, filter, switchMap, map, groupBy, mergeMap, distinctUntilChanged, startWith, pairwise } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, Optional, InjectionToken, APP_INITIALIZER, NgModule, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { registerVersion } from 'firebase/app';\nimport { isSupported as isSupported$1, getAnalytics as getAnalytics$1, getGoogleAnalyticsClientId as getGoogleAnalyticsClientId$1, initializeAnalytics as initializeAnalytics$1, logEvent as logEvent$1, setAnalyticsCollectionEnabled as setAnalyticsCollectionEnabled$1, setConsent as setConsent$1, setCurrentScreen as setCurrentScreen$1, setDefaultEventParameters as setDefaultEventParameters$1, settings as settings$1, setUserId as setUserId$1, setUserProperties as setUserProperties$1 } from 'firebase/analytics';\nexport * from 'firebase/analytics';\nimport * as i2 from '@angular/platform-browser';\nimport * as i1$1 from '@angular/router';\nimport { ActivationEnd, ɵEmptyOutletComponent as _EmptyOutletComponent } from '@angular/router';\nimport * as i1 from '@angular/fire/auth';\nimport { authState } from '@angular/fire/auth';\nclass Analytics {\n  constructor(analytics) {\n    return analytics;\n  }\n}\nconst ANALYTICS_PROVIDER_NAME = 'analytics';\nclass AnalyticsInstances {\n  constructor() {\n    return _getAllInstancesOf(ANALYTICS_PROVIDER_NAME);\n  }\n}\nconst analyticInstance$ = timer(0, 300).pipe(concatMap(() => from(_getAllInstancesOf(ANALYTICS_PROVIDER_NAME))), distinct());\nconst isAnalyticsSupportedValueSymbol = '__angularfire_symbol__analyticsIsSupportedValue';\nconst isAnalyticsSupportedPromiseSymbol = '__angularfire_symbol__analyticsIsSupported';\nglobalThis[isAnalyticsSupportedPromiseSymbol] ||= isSupported$1().then(it => globalThis[isAnalyticsSupportedValueSymbol] = it).catch(() => globalThis[isAnalyticsSupportedValueSymbol] = false);\nconst isAnalyticsSupportedFactory = {\n  async: () => globalThis[isAnalyticsSupportedPromiseSymbol],\n  sync: () => {\n    const ret = globalThis[isAnalyticsSupportedValueSymbol];\n    if (ret === undefined) {\n      throw new Error(_isSupportedError('Analytics'));\n    }\n    return ret;\n  }\n};\nconst isSupported = isAnalyticsSupportedFactory.async;\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst getAnalytics = _zoneWrap(getAnalytics$1, true);\nconst getGoogleAnalyticsClientId = _zoneWrap(getGoogleAnalyticsClientId$1, true);\nconst initializeAnalytics = _zoneWrap(initializeAnalytics$1, true);\nconst logEvent = _zoneWrap(logEvent$1, true);\nconst setAnalyticsCollectionEnabled = _zoneWrap(setAnalyticsCollectionEnabled$1, true);\nconst setConsent = _zoneWrap(setConsent$1, true);\nconst setCurrentScreen = _zoneWrap(setCurrentScreen$1, true);\nconst setDefaultEventParameters = _zoneWrap(setDefaultEventParameters$1, true);\nconst settings = _zoneWrap(settings$1, true);\nconst setUserId = _zoneWrap(setUserId$1, true);\nconst setUserProperties = _zoneWrap(setUserProperties$1, true);\nclass UserTrackingService {\n  initialized;\n  disposables = [];\n  constructor(auth, zone, injector) {\n    registerVersion('angularfire', VERSION.full, 'user-tracking');\n    let resolveInitialized;\n    this.initialized = zone.runOutsideAngular(() => new Promise(resolve => {\n      resolveInitialized = resolve;\n    }));\n    // The APP_INITIALIZER that is making isSupported() sync for the sake of convenient DI\n    // may not be done when services are initialized. Guard the functionality by first ensuring\n    // that the (global) promise has resolved, then get Analytics from the injector.\n    isSupported().then(() => {\n      const analytics = injector.get(Analytics);\n      if (analytics) {\n        this.disposables = [\n        // TODO add credential tracking back in\n        authState(auth).subscribe(user => {\n          setUserId(analytics, user?.uid);\n          resolveInitialized();\n        })];\n      } else {\n        resolveInitialized();\n      }\n    });\n  }\n  ngOnDestroy() {\n    this.disposables.forEach(it => it.unsubscribe());\n  }\n  static ɵfac = function UserTrackingService_Factory(t) {\n    return new (t || UserTrackingService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserTrackingService,\n    factory: UserTrackingService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserTrackingService, [{\n    type: Injectable\n  }], () => [{\n    type: i1.Auth\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i0.Injector\n  }], null);\n})();\nconst FIREBASE_EVENT_ORIGIN_KEY = 'firebase_event_origin';\nconst FIREBASE_PREVIOUS_SCREEN_CLASS_KEY = 'firebase_previous_class';\nconst FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY = 'firebase_previous_id';\nconst FIREBASE_PREVIOUS_SCREEN_NAME_KEY = 'firebase_previous_screen';\nconst FIREBASE_SCREEN_CLASS_KEY = 'firebase_screen_class';\nconst FIREBASE_SCREEN_INSTANCE_ID_KEY = 'firebase_screen_id';\nconst FIREBASE_SCREEN_NAME_KEY = 'firebase_screen';\nconst OUTLET_KEY = 'outlet';\nconst PAGE_PATH_KEY = 'page_path';\nconst PAGE_TITLE_KEY = 'page_title';\nconst SCREEN_CLASS_KEY = 'screen_class';\nconst SCREEN_NAME_KEY = 'screen_name';\nconst SCREEN_VIEW_EVENT = 'screen_view';\nconst EVENT_ORIGIN_AUTO = 'auto';\nconst SCREEN_INSTANCE_DELIMITER = '#';\n// this is an INT64 in iOS/Android but use INT32 cause javascript\nlet nextScreenInstanceID = Math.floor(Math.random() * (2 ** 32 - 1)) - 2 ** 31;\nconst knownScreenInstanceIDs = {};\nconst getScreenInstanceID = params => {\n  // unique the screen class against the outlet name\n  const screenInstanceKey = [params[SCREEN_CLASS_KEY], params[OUTLET_KEY]].join(SCREEN_INSTANCE_DELIMITER);\n  // eslint-disable-next-line no-prototype-builtins\n  if (knownScreenInstanceIDs.hasOwnProperty(screenInstanceKey)) {\n    return knownScreenInstanceIDs[screenInstanceKey];\n  } else {\n    const ret = nextScreenInstanceID++;\n    knownScreenInstanceIDs[screenInstanceKey] = ret;\n    return ret;\n  }\n};\nconst ɵscreenViewEvent = (router, title, componentFactoryResolver) => {\n  const activationEndEvents = router.events.pipe(filter(e => e instanceof ActivationEnd));\n  return activationEndEvents.pipe(switchMap(activationEnd => {\n    // router parseUrl is having trouble with outlets when they're empty\n    // e.g, /asdf/1(bob://sally:asdf), so put another slash in when empty\n    const urlTree = router.parseUrl(router.url.replace(/(?:\\().+(?:\\))/g, a => a.replace('://', ':///')));\n    const pagePath = urlTree.root.children[activationEnd.snapshot.outlet]?.toString() || '';\n    const actualSnapshot = router.routerState.root.children.map(it => it).find(it => it.outlet === activationEnd.snapshot.outlet);\n    if (!actualSnapshot) {\n      return of(null);\n    }\n    let actualDeep = actualSnapshot;\n    while (actualDeep.firstChild) {\n      actualDeep = actualDeep.firstChild;\n    }\n    const screenName = actualDeep.pathFromRoot.map(s => s.routeConfig?.path).filter(it => it).join('/') || '/';\n    const params = {\n      [SCREEN_NAME_KEY]: screenName,\n      [PAGE_PATH_KEY]: `/${pagePath}`,\n      [FIREBASE_EVENT_ORIGIN_KEY]: EVENT_ORIGIN_AUTO,\n      [FIREBASE_SCREEN_NAME_KEY]: screenName,\n      [OUTLET_KEY]: activationEnd.snapshot.outlet\n    };\n    if (title) {\n      params[PAGE_TITLE_KEY] = title.getTitle();\n    }\n    let component = actualSnapshot.component;\n    if (component) {\n      if (component === _EmptyOutletComponent) {\n        let deepSnapshot = activationEnd.snapshot;\n        // TODO when might there be mutple children, different outlets? explore\n        while (deepSnapshot.firstChild) {\n          deepSnapshot = deepSnapshot.firstChild;\n        }\n        component = deepSnapshot.component;\n      }\n    } else {\n      component = activationEnd.snapshot.component;\n    }\n    if (typeof component === 'string') {\n      return of({\n        ...params,\n        [SCREEN_CLASS_KEY]: component\n      });\n    } else if (component) {\n      const componentFactory = componentFactoryResolver.resolveComponentFactory(component);\n      return of({\n        ...params,\n        [SCREEN_CLASS_KEY]: componentFactory.selector\n      });\n    }\n    // lazy loads cause extra activations, ignore\n    return of(null);\n  }), filter(it => !!it), map(params => ({\n    [FIREBASE_SCREEN_CLASS_KEY]: params[SCREEN_CLASS_KEY],\n    [FIREBASE_SCREEN_INSTANCE_ID_KEY]: getScreenInstanceID(params),\n    ...params\n  })), groupBy(it => it[OUTLET_KEY]), mergeMap(it => it.pipe(distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)), startWith(undefined), pairwise(), map(([prior, current]) => prior ? {\n    [FIREBASE_PREVIOUS_SCREEN_CLASS_KEY]: prior[SCREEN_CLASS_KEY],\n    [FIREBASE_PREVIOUS_SCREEN_NAME_KEY]: prior[SCREEN_NAME_KEY],\n    [FIREBASE_PREVIOUS_SCREEN_INSTANCE_ID_KEY]: prior[FIREBASE_SCREEN_INSTANCE_ID_KEY],\n    ...current\n  } : current))));\n};\nclass ScreenTrackingService {\n  disposable;\n  constructor(router, title, componentFactoryResolver, zone, userTrackingService, injector) {\n    registerVersion('angularfire', VERSION.full, 'screen-tracking');\n    // The APP_INITIALIZER that is making isSupported() sync for the sake of convenient DI\n    // may not be done when services are initialized. Guard the functionality by first ensuring\n    // that the (global) promise has resolved, then get Analytics from the injector.\n    isSupported().then(() => {\n      const analytics = injector.get(Analytics);\n      if (!router || !analytics) {\n        return;\n      }\n      zone.runOutsideAngular(() => {\n        this.disposable = ɵscreenViewEvent(router, title, componentFactoryResolver).pipe(switchMap(async params => {\n          if (userTrackingService) {\n            await userTrackingService.initialized;\n          }\n          return logEvent(analytics, SCREEN_VIEW_EVENT, params);\n        })).subscribe();\n      });\n    });\n  }\n  ngOnDestroy() {\n    if (this.disposable) {\n      this.disposable.unsubscribe();\n    }\n  }\n  static ɵfac = function ScreenTrackingService_Factory(t) {\n    return new (t || ScreenTrackingService)(i0.ɵɵinject(i1$1.Router, 8), i0.ɵɵinject(i2.Title, 8), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(UserTrackingService, 8), i0.ɵɵinject(i0.Injector));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScreenTrackingService,\n    factory: ScreenTrackingService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScreenTrackingService, [{\n    type: Injectable\n  }], () => [{\n    type: i1$1.Router,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i2.Title,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i0.ComponentFactoryResolver\n  }, {\n    type: i0.NgZone\n  }, {\n    type: UserTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i0.Injector\n  }], null);\n})();\nconst PROVIDED_ANALYTICS_INSTANCES = new InjectionToken('angularfire2.analytics-instances');\nfunction defaultAnalyticsInstanceFactory(provided, defaultApp) {\n  if (!isAnalyticsSupportedFactory.sync()) {\n    return null;\n  }\n  const defaultAnalytics = _getDefaultInstanceOf(ANALYTICS_PROVIDER_NAME, provided, defaultApp);\n  return defaultAnalytics && new Analytics(defaultAnalytics);\n}\nfunction analyticsInstanceFactory(fn) {\n  return (zone, injector) => {\n    if (!isAnalyticsSupportedFactory.sync()) {\n      return null;\n    }\n    const analytics = zone.runOutsideAngular(() => fn(injector));\n    return new Analytics(analytics);\n  };\n}\nconst ANALYTICS_INSTANCES_PROVIDER = {\n  provide: AnalyticsInstances,\n  deps: [[new Optional(), PROVIDED_ANALYTICS_INSTANCES]]\n};\nconst DEFAULT_ANALYTICS_INSTANCE_PROVIDER = {\n  provide: Analytics,\n  useFactory: defaultAnalyticsInstanceFactory,\n  deps: [[new Optional(), PROVIDED_ANALYTICS_INSTANCES], FirebaseApp]\n};\nclass AnalyticsModule {\n  constructor(_screenTrackingService, _userTrackingService) {\n    registerVersion('angularfire', VERSION.full, 'analytics');\n  }\n  static ɵfac = function AnalyticsModule_Factory(t) {\n    return new (t || AnalyticsModule)(i0.ɵɵinject(ScreenTrackingService, 8), i0.ɵɵinject(UserTrackingService, 8));\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AnalyticsModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_ANALYTICS_INSTANCE_PROVIDER, ANALYTICS_INSTANCES_PROVIDER, {\n      provide: APP_INITIALIZER,\n      useValue: isAnalyticsSupportedFactory.async,\n      multi: true\n    }]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AnalyticsModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_ANALYTICS_INSTANCE_PROVIDER, ANALYTICS_INSTANCES_PROVIDER, {\n        provide: APP_INITIALIZER,\n        useValue: isAnalyticsSupportedFactory.async,\n        multi: true\n      }]\n    }]\n  }], () => [{\n    type: ScreenTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: UserTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nfunction provideAnalytics(fn, ...deps) {\n  registerVersion('angularfire', VERSION.full, 'analytics');\n  return makeEnvironmentProviders([DEFAULT_ANALYTICS_INSTANCE_PROVIDER, ANALYTICS_INSTANCES_PROVIDER, {\n    provide: APP_INITIALIZER,\n    useValue: isAnalyticsSupportedFactory.async,\n    multi: true\n  }, {\n    provide: PROVIDED_ANALYTICS_INSTANCES,\n    useFactory: analyticsInstanceFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, FirebaseApps, ...deps]\n  }]);\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Analytics, AnalyticsInstances, AnalyticsModule, ScreenTrackingService, UserTrackingService, analyticInstance$, getAnalytics, getGoogleAnalyticsClientId, initializeAnalytics, isSupported, logEvent, provideAnalytics, setAnalyticsCollectionEnabled, setConsent, setCurrentScreen, setDefaultEventParameters, setUserId, setUserProperties, settings, ɵscreenViewEvent };\n", "import { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, Injectable, Optional, Inject, NgModule } from '@angular/core';\nimport * as i2 from '@angular/fire';\nimport { VERSION } from '@angular/fire';\nimport * as i1 from '@angular/fire/compat';\nimport { ɵcacheInstance as _cacheInstance, ɵlazySDKProxy as _lazySDKProxy, ɵapplyMixins as _applyMixins } from '@angular/fire/compat';\nimport { isSupported } from 'firebase/analytics';\nimport { of, EMPTY } from 'rxjs';\nimport { observeOn, switchMap, map, shareReplay } from 'rxjs/operators';\nimport firebase from 'firebase/compat/app';\nimport { ɵscreenViewEvent as _screenViewEvent } from '@angular/fire/analytics';\nimport * as i3 from '@angular/platform-browser';\nimport * as i2$2 from '@angular/router';\nimport * as i2$1 from '@angular/fire/compat/auth';\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\n// Export a null object with the same keys as firebase/compat/analytics, so Proxy can work with proxy-polyfill in Internet Explorer\nconst proxyPolyfillCompat = {\n  app: null,\n  logEvent: null,\n  setCurrentScreen: null,\n  setUserId: null,\n  setUserProperties: null,\n  setAnalyticsCollectionEnabled: null\n};\nconst COLLECTION_ENABLED = new InjectionToken('angularfire2.analytics.analyticsCollectionEnabled');\nconst APP_VERSION = new InjectionToken('angularfire2.analytics.appVersion');\nconst APP_NAME = new InjectionToken('angularfire2.analytics.appName');\nconst DEBUG_MODE = new InjectionToken('angularfire2.analytics.debugMode');\nconst CONFIG = new InjectionToken('angularfire2.analytics.config');\nconst APP_NAME_KEY = 'app_name';\nconst APP_VERSION_KEY = 'app_version';\nconst DEBUG_MODE_KEY = 'debug_mode';\nconst GTAG_CONFIG_COMMAND = 'config';\nconst GTAG_FUNCTION_NAME = 'gtag'; // TODO rename these\nconst DATA_LAYER_NAME = 'dataLayer';\nconst SEND_TO_KEY = 'send_to';\nclass AngularFireAnalytics {\n  measurementId;\n  analyticsInitialized = new Promise(() => undefined);\n  async updateConfig(config) {\n    await this.analyticsInitialized;\n    window[GTAG_FUNCTION_NAME](GTAG_CONFIG_COMMAND, this.measurementId, {\n      ...config,\n      update: true\n    });\n  }\n  constructor(app, analyticsCollectionEnabled, providedAppVersion, providedAppName, debugModeEnabled, providedConfig,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, zone, schedulers) {\n    if (isPlatformBrowser(platformId)) {\n      window[DATA_LAYER_NAME] = window[DATA_LAYER_NAME] || [];\n      // It turns out we can't rely on the measurementId in the Firebase config JSON\n      // this identifier is not stable. firebase/analytics does a call to get a fresh value\n      // falling back on the one in the config. Rather than do that ourselves we should listen\n      // on our gtag function for a analytics config command\n      // e.g, ['config', measurementId, { origin: 'firebase', firebase_id }]\n      const parseMeasurementId = (...args) => {\n        if (args[0] === 'config' && args[2].origin === 'firebase') {\n          this.measurementId = args[1];\n          return true;\n        } else {\n          return false;\n        }\n      };\n      const patchGtag = fn => {\n        window[GTAG_FUNCTION_NAME] = (...args) => {\n          if (fn) {\n            fn(...args);\n          }\n          // Inject app_name and app_version into events\n          // TODO(jamesdaniels): I'm doing this as documented but it's still not\n          //   showing up in the console. Investigate. Guessing it's just part of the\n          //   whole GA4 transition mess.\n          if (args[0] === 'event' && args[2][SEND_TO_KEY] === this.measurementId) {\n            if (providedAppName) {\n              args[2][APP_NAME_KEY] = providedAppName;\n            }\n            if (providedAppVersion) {\n              args[2][APP_VERSION_KEY] = providedAppVersion;\n            }\n          }\n          if (debugModeEnabled && typeof console !== 'undefined') {\n            // eslint-disable-next-line no-console\n            console.info(...args);\n          }\n          /**\n           * According to the gtag documentation, this function that defines a custom data layer cannot be\n           * an arrow function because 'arguments' is not an array. It is actually an object that behaves\n           * like an array and contains more information then just indexes. Transforming this into arrow function\n           * caused issue #2505 where analytics no longer sent any data.\n           */\n          (function (..._args) {\n            window[DATA_LAYER_NAME].push(arguments);\n          })(...args);\n        };\n      };\n      // Unclear if we still need to but I was running into config/events I passed\n      // to gtag before ['js' timestamp] weren't getting parsed, so let's make a promise\n      // that resolves when firebase/analytics has configured gtag.js that we wait on\n      // before sending anything\n      const firebaseAnalyticsAlreadyInitialized = window[DATA_LAYER_NAME].some(parseMeasurementId);\n      if (firebaseAnalyticsAlreadyInitialized) {\n        this.analyticsInitialized = Promise.resolve();\n        patchGtag();\n      } else {\n        this.analyticsInitialized = new Promise(resolve => {\n          patchGtag((...args) => {\n            if (parseMeasurementId(...args)) {\n              resolve();\n            }\n          });\n        });\n      }\n      if (providedConfig) {\n        this.updateConfig(providedConfig);\n      }\n      if (debugModeEnabled) {\n        this.updateConfig({\n          [DEBUG_MODE_KEY]: 1\n        });\n      }\n    } else {\n      this.analyticsInitialized = Promise.resolve();\n    }\n    const analytics = of(undefined).pipe(observeOn(schedulers.outsideAngular), switchMap(isSupported), switchMap(supported => supported ? zone.runOutsideAngular(() => import('firebase/compat/analytics')) : EMPTY), map(() => {\n      return _cacheInstance(`analytics`, 'AngularFireAnalytics', app.name, () => {\n        const analytics = app.analytics();\n        if (analyticsCollectionEnabled === false) {\n          analytics.setAnalyticsCollectionEnabled(false);\n        }\n        return analytics;\n      }, [app, analyticsCollectionEnabled, providedConfig, debugModeEnabled]);\n    }), shareReplay({\n      bufferSize: 1,\n      refCount: false\n    }));\n    return _lazySDKProxy(this, analytics, zone);\n  }\n  static ɵfac = function AngularFireAnalytics_Factory(t) {\n    return new (t || AngularFireAnalytics)(i0.ɵɵinject(i1.FirebaseApp), i0.ɵɵinject(COLLECTION_ENABLED, 8), i0.ɵɵinject(APP_VERSION, 8), i0.ɵɵinject(APP_NAME, 8), i0.ɵɵinject(DEBUG_MODE, 8), i0.ɵɵinject(CONFIG, 8), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ɵAngularFireSchedulers));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AngularFireAnalytics,\n    factory: AngularFireAnalytics.ɵfac,\n    providedIn: 'any'\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAnalytics, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'any'\n    }]\n  }], () => [{\n    type: i1.FirebaseApp\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [COLLECTION_ENABLED]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [APP_VERSION]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [APP_NAME]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DEBUG_MODE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [CONFIG]\n    }]\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i0.NgZone\n  }, {\n    type: i2.ɵAngularFireSchedulers\n  }], null);\n})();\n_applyMixins(AngularFireAnalytics, [proxyPolyfillCompat]);\nclass UserTrackingService {\n  initialized;\n  disposables = [];\n  // TODO a user properties injector\n  constructor(analytics,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  platformId, auth, zone) {\n    firebase.registerVersion('angularfire', VERSION.full, 'compat-user-tracking');\n    if (!isPlatformServer(platformId)) {\n      let resolveInitialized;\n      this.initialized = zone.runOutsideAngular(() => new Promise(resolve => resolveInitialized = resolve));\n      this.disposables = [auth.authState.subscribe(user => {\n        analytics.setUserId(user?.uid);\n        resolveInitialized();\n      }), auth.credential.subscribe(credential => {\n        if (credential) {\n          const method = credential.user.isAnonymous ? 'anonymous' : credential.additionalUserInfo.providerId;\n          if (credential.additionalUserInfo.isNewUser) {\n            analytics.logEvent('sign_up', {\n              method\n            });\n          }\n          analytics.logEvent('login', {\n            method\n          });\n        }\n      })];\n    } else {\n      this.initialized = Promise.resolve();\n    }\n  }\n  ngOnDestroy() {\n    this.disposables.forEach(it => it.unsubscribe());\n  }\n  static ɵfac = function UserTrackingService_Factory(t) {\n    return new (t || UserTrackingService)(i0.ɵɵinject(AngularFireAnalytics), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(i2$1.AngularFireAuth), i0.ɵɵinject(i0.NgZone));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserTrackingService,\n    factory: UserTrackingService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserTrackingService, [{\n    type: Injectable\n  }], () => [{\n    type: AngularFireAnalytics\n  }, {\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: i2$1.AngularFireAuth\n  }, {\n    type: i0.NgZone\n  }], null);\n})();\nconst SCREEN_VIEW_EVENT = 'screen_view';\nclass ScreenTrackingService {\n  disposable;\n  constructor(analytics, router, title, componentFactoryResolver, zone, userTrackingService) {\n    firebase.registerVersion('angularfire', VERSION.full, 'compat-screen-tracking');\n    if (!router || !analytics) {\n      return this;\n    }\n    zone.runOutsideAngular(() => {\n      this.disposable = _screenViewEvent(router, title, componentFactoryResolver).pipe(switchMap(async params => {\n        if (userTrackingService) {\n          await userTrackingService.initialized;\n        }\n        return await analytics.logEvent(SCREEN_VIEW_EVENT, params);\n      })).subscribe();\n    });\n  }\n  ngOnDestroy() {\n    if (this.disposable) {\n      this.disposable.unsubscribe();\n    }\n  }\n  static ɵfac = function ScreenTrackingService_Factory(t) {\n    return new (t || ScreenTrackingService)(i0.ɵɵinject(AngularFireAnalytics), i0.ɵɵinject(i2$2.Router, 8), i0.ɵɵinject(i3.Title, 8), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(UserTrackingService, 8));\n  };\n  static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScreenTrackingService,\n    factory: ScreenTrackingService.ɵfac\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScreenTrackingService, [{\n    type: Injectable\n  }], () => [{\n    type: AngularFireAnalytics\n  }, {\n    type: i2$2.Router,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i3.Title,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: i0.ComponentFactoryResolver\n  }, {\n    type: i0.NgZone\n  }, {\n    type: UserTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\nclass AngularFireAnalyticsModule {\n  constructor(analytics,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  screenTracking,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  userTracking) {\n    firebase.registerVersion('angularfire', VERSION.full, 'analytics-compat');\n    // calling anything on analytics will eagerly load the SDK\n    analytics.app.then(() => undefined);\n  }\n  static ɵfac = function AngularFireAnalyticsModule_Factory(t) {\n    return new (t || AngularFireAnalyticsModule)(i0.ɵɵinject(AngularFireAnalytics), i0.ɵɵinject(ScreenTrackingService, 8), i0.ɵɵinject(UserTrackingService, 8));\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: AngularFireAnalyticsModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [AngularFireAnalytics]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AngularFireAnalyticsModule, [{\n    type: NgModule,\n    args: [{\n      providers: [AngularFireAnalytics]\n    }]\n  }], () => [{\n    type: AngularFireAnalytics\n  }, {\n    type: ScreenTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }, {\n    type: UserTrackingService,\n    decorators: [{\n      type: Optional\n    }]\n  }], null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APP_NAME, APP_VERSION, AngularFireAnalytics, AngularFireAnalyticsModule, COLLECTION_ENABLED, CONFIG, DEBUG_MODE, ScreenTrackingService, UserTrackingService };\n"],
  "mappings": "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",
  "names": ["user", "FirebaseApp", "authState", "user", "idToken", "applyActionCode", "beforeAuthStateChanged", "checkActionCode", "confirmPasswordReset", "connectAuthEmulator", "createUserWithEmailAndPassword", "deleteUser", "fetchSignInMethodsForEmail", "getAdditionalUserInfo", "getAuth", "getIdToken", "getIdTokenResult", "getMultiFactorResolver", "getRedirectResult", "initializeAuth", "initializeRecaptchaConfig", "isSignInWithEmailLink", "linkWithCredential", "linkWithPhoneNumber", "linkWithPopup", "linkWithRedirect", "multiFactor", "onAuthStateChanged", "onIdTokenChanged", "parseActionCodeURL", "reauthenticateWithCredential", "reauthenticateWithPhoneNumber", "reauthenticateWithPopup", "reauthenticateWithRedirect", "reload", "revokeAccessToken", "sendEmailVerification", "sendPasswordResetEmail", "sendSignInLinkToEmail", "setPersistence", "signInAnonymously", "signInWithCredential", "signInWithCustomToken", "signInWithEmailAndPassword", "signInWithEmailLink", "signInWithPhoneNumber", "signInWithPopup", "signInWithRedirect", "signOut", "unlink", "updateCurrentUser", "updateEmail", "updatePassword", "updatePhoneNumber", "updateProfile", "useDeviceLanguage", "validatePassword", "verifyBeforeUpdateEmail", "verifyPasswordResetCode", "isSupported", "getAnalytics", "getGoogleAnalyticsClientId", "initializeAnalytics", "logEvent", "setAnalyticsCollectionEnabled", "setConsent", "setCurrentScreen", "setDefaultEventParameters", "settings", "setUserId", "setUserProperties", "authState", "user", "FirebaseApp", "analytics", "UserTrackingService", "user", "SCREEN_VIEW_EVENT", "ScreenTrackingService"]
}
